{"version":3,"sources":["webpack:///./src/templates/tags.tsx","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.find.js"],"names":["Tags","props","tag","pageContext","data","allMarkdownRemark","edges","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","config","title","property","content","siteUrl","pathContext","slug","twitter","name","split","className","SiteHeader","outer","image","style","backgroundImage","childImageSharp","fluid","src","inner","isHome","description","SiteMain","PostFeed","PostFeedRaise","map","key","fields","post","pageQuery","$export","$find","forced","Array","P","F","callbackfn","this","arguments","length","undefined"],"mappings":"kSAuHeA,UAlE2B,SAAAC,GACxC,IAAMC,EAAMD,EAAME,YAAYD,IADmB,EAEnBD,EAAMG,KAAKC,kBAAjCC,EAFyC,EAEzCA,MAAOC,EAFkC,EAElCA,WACTC,EAAUP,EAAMG,KAAKK,WAAWH,MAAMI,MAC1C,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,GAAGC,gBAAkBZ,EAAIY,iBAGvC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,+BACGZ,EADH,MACWa,IAAOC,OAElB,0BAAMC,SAAS,eAAeC,QAASH,IAAOC,QAC9C,0BAAMC,SAAS,UAAUC,QAAQ,YACjC,0BAAMD,SAAS,WAAWC,QAAYhB,EAAL,MAAca,IAAOC,QACtD,0BAAMC,SAAS,SAASC,QAASH,IAAOI,QAAUlB,EAAMmB,YAAYC,OACpE,0BAAMJ,SAAS,oBAAoBC,QAASH,IAAOO,UACnD,0BAAMC,KAAK,eAAeL,QAAQ,wBAClC,0BAAMK,KAAK,gBAAgBL,QAAYhB,EAAL,MAAca,IAAOC,QACvD,0BAAMO,KAAK,cAAcL,QAASH,IAAOI,QAAUlB,EAAMmB,YAAYC,OACrE,0BAAME,KAAK,eAAeL,QAAO,IAAMH,IAAOO,QAAQE,MAAM,wBAAwB,MAEtF,kBAAC,IAAD,KACE,4BACEC,UAAcC,IAAL,IAAmBC,IAAnB,KAA4BnB,GAAWA,EAAQI,KAAKgB,MAAQ,GAAK,YAC1EC,MAAO,CACLC,gBACEtB,GAAWA,EAAQI,KAAKgB,MAAxB,QACYpB,EAAQI,KAAKgB,MAAMG,gBAAgBC,MAAMC,IADrD,KAEI,KAGR,yBAAKR,UAAS,GAAKS,KACjB,kBAAC,IAAD,CAASC,QAAQ,IACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAYjC,GACZ,kBAAC,IAAD,KACGM,GAAWA,EAAQI,KAAKwB,YACvB5B,EAAQI,KAAKwB,YAEb,uDACmB7B,EAAa,GAAQA,EAArB,SACD,IAAfA,GAAA,SACe,IAAfA,GAAA,gBAOb,0BAAMM,GAAG,YAAYY,UAAcY,IAAL,IAAiBV,KAC7C,yBAAKF,UAAS,GAAKS,KACjB,yBAAKT,UAAca,IAAL,IAAiBC,KAC5BjC,EAAMkC,KAAI,gBAAG5B,EAAH,EAAGA,KAAH,OACT,kBAAC,IAAD,CAAU6B,IAAK7B,EAAK8B,OAAOrB,KAAMsB,KAAM/B,UAK/C,kBAAC,IAAD,SAQD,IAAMgC,EAAY,c,kCCvHzB,IAAIC,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GAEpCC,GAAS,EADH,QAGC,IAAIC,MAAM,GAAM,MAAE,WAAcD,GAAS,KACpDF,EAAQA,EAAQI,EAAIJ,EAAQK,EAAIH,EAAQ,QAAS,CAC/CrC,KAAM,SAAcyC,GAClB,OAAOL,EAAMM,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CATU","file":"component---src-templates-tags-tsx-62e274f92e687ad0d553.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport Helmet from 'react-helmet';\nimport config from '../website-config';\n\ninterface TagTemplateProps {\n  pathContext: {\n    slug: string;\n  };\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: {\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: any;\n            };\n          };\n        };\n      }[];\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: {\n        node: PageContext;\n      }[];\n    };\n  };\n}\n\nconst Tags: React.SFC<TagTemplateProps> = props => {\n  const tag = props.pageContext.tag;\n  const { edges, totalCount } = props.data.allMarkdownRemark;\n  const tagData = props.data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n        <meta property=\"article:publisher\" content={config.twitter} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n        <meta name=\"twitter:site\" content={`@${config.twitter.split('https://twitter.com/')[1]}`} />\n      </Helmet>\n      <Wrapper>\n        <header\n          className={`${SiteHeader} ${outer} ${tagData && tagData.node.image ? '' : 'no-cover'}`}\n          style={{\n            backgroundImage:\n              tagData && tagData.node.image\n                ? `url('${tagData.node.image.childImageSharp.fluid.src}')`\n                : '',\n          }}\n        >\n          <div className={`${inner}`}>\n            <SiteNav isHome={false} />\n            <SiteHeaderContent>\n              <SiteTitle>{tag}</SiteTitle>\n              <SiteDescription>\n                {tagData && tagData.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && `1 post`}\n                    {totalCount === 0 && `No posts`}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </header>\n        <main id=\"site-main\" className={`${SiteMain} ${outer}`}>\n          <div className={`${inner}`}>\n            <div className={`${PostFeed} ${PostFeedRaise}`}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 100) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}