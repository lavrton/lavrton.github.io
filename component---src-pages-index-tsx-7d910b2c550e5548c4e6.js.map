{"version":3,"sources":["webpack:///./src/components/Meta.tsx","webpack:///./src/pages/index.tsx"],"names":["Wrapper","title","path","description","image","tags","date","authorName","type","width","childImageSharp","fluid","sizes","split","height","String","Math","round","Number","aspectRatio","property","content","config","siteUrl","src","twitter","name","HomePosts","css","IndexPage","props","data","header","className","SiteHeader","outer","style","backgroundImage","inner","isHome","id","SiteMain","PostFeed","PostFeedRaise","allMarkdownRemark","edges","map","post","key","node","fields","slug","children","pageQuery"],"mappings":"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","file":"component---src-pages-index-tsx-7d910b2c550e5548c4e6.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport config from '../website-config';\n\ninterface WrapperProps {\n  title: string;\n  path: string;\n  description?: string;\n  image?: any;\n  tags?: string[];\n  date?: string;\n  authorName: string;\n  type?: string;\n}\n\nconst Wrapper: React.SFC<WrapperProps> = ({\n  title,\n  path,\n  description,\n  image,\n  tags,\n  date,\n  authorName,\n  type,\n}) => {\n  const width = image ? image.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0] : 0;\n  const height = image\n    ? String(Math.round(Number(width) / image.childImageSharp.fluid.aspectRatio))\n    : 0;\n  return (\n    <Helmet>\n      <title>{title}</title>\n      <meta property=\"og:site_name\" content={config.title} />\n      <meta property=\"og:type\" content={type || 'article'} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:url\" content={config.siteUrl + path} />\n      {image && (\n        <meta property=\"og:image\" content={config.siteUrl + image.childImageSharp.fluid.src} />\n      )}\n      {date && <meta property=\"article:published_time\" content={date} />}\n      {tags && <meta property=\"article:tag\" content={tags[0]} />}\n\n      <meta property=\"article:publisher\" content={config.twitter} />\n      <meta property=\"article:author\" content={config.twitter} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:url\" content={config.siteUrl + path} />\n      {image && (\n        <meta name=\"twitter:image\" content={config.siteUrl + image.childImageSharp.fluid.src} />\n      )}\n      <meta name=\"twitter:label1\" content=\"Written by\" />\n      <meta name=\"twitter:data1\" content={authorName} />\n      <meta name=\"twitter:label2\" content=\"Filed under\" />\n      {tags && <meta name=\"twitter:data2\" content={tags[0]} />}\n      <meta name=\"twitter:site\" content={`@${config.twitter.split('https://twitter.com/')[1]}`} />\n      <meta\n        name=\"twitter:creator\"\n        content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n      />\n      {width && <meta property=\"og:image:width\" content={width} />}\n      {height && <meta property=\"og:image:height\" content={height} />}\n    </Helmet>\n  );\n};\n\nexport default Wrapper;\n","import { graphql } from 'gatsby';\nimport * as React from 'react';\nimport { css } from 'react-emotion';\nimport Helmet from 'react-helmet';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport Meta from '../components/Meta';\n\nimport IndexLayout from '../layouts';\nimport config from '../website-config';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from '../templates/post';\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card:nth-child(6n + 1):not(.no-image) {\n      flex: 1 1 100%;\n      flex-direction: row;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      border-radius: 5px 0 0 5px;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-content {\n      flex: 0 1 357px;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) h2 {\n      font-size: 2.6rem;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) p {\n      font-size: 1.8rem;\n      line-height: 1.55em;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-content-link {\n      padding: 30px 40px 0;\n    }\n\n    .post-card:nth-child(6n + 1):not(.no-image) .post-card-meta {\n      padding: 0 40px 30px;\n    }\n  }\n`;\n\nexport interface IndexProps {\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: any;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fluid: any;\n      };\n    };\n    allMarkdownRemark: {\n      edges: {\n        node: PageContext;\n      }[];\n    };\n  };\n}\n\nconst IndexPage: React.SFC<IndexProps> = props => {\n  const width = props.data.header.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0];\n  const height = String(Number(width) / props.data.header.childImageSharp.fluid.aspectRatio);\n  return (\n    <IndexLayout className={`${HomePosts}`}>\n      <Meta\n        title={config.title}\n        type=\"website\"\n        description={config.description}\n        path={''}\n        image={props.data.header}\n        authorName={'Anton'}\n      />\n      {/* <Helmet>\n        <title>{config.title}</title>\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta property=\"og:image\" content={props.data.header.childImageSharp.fluid.src} />\n        <meta property=\"article:publisher\" content={config.twitter} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image:src\"\n          content={config.siteUrl + props.data.header.childImageSharp.fluid.src}\n        />\n        <meta name=\"twitter:site\" content={`@${config.twitter.split('https://twitter.com/')[1]}`} />\n        <meta property=\"og:image:width\" content={width} />\n        <meta property=\"og:image:height\" content={height} />\n      </Helmet> */}\n      <Wrapper>\n        <header\n          className={`${SiteHeader} ${outer}`}\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fluid.src}')`,\n          }}\n        >\n          <div className={`${inner}`}>\n            <SiteHeaderContent>\n              <SiteTitle>\n                {/* {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '45px' }}\n                    src={props.data.logo.childImageSharp.fixed.src}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )} */}\n                {config.title}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n            <SiteNav isHome={true} />\n          </div>\n        </header>\n        <main id=\"site-main\" className={`${SiteMain} ${outer}`}>\n          <div className={`${inner}`}>\n            <div className={`${PostFeed} ${PostFeedRaise}`}>\n              {props.data.allMarkdownRemark.edges.map(post => {\n                return <PostCard key={post.node.fields.slug} post={post.node} />;\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    logo: file(relativePath: { eq: \"img/logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"img/blog-cover.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fluid(maxWidth: 2000) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(limit: 1000, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 100) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}